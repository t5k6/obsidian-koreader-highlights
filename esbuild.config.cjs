const esbuild = require('esbuild');
const fs = require('fs');
const { builtinModules } = require('module');
const path = require('path');
const process = require('process');

async function embedWasm() {
	// Read the WASM file from the sql.js package
	const wasmPath = path.join(
		__dirname,
		"node_modules",
		"sql.js",
		"dist",
		"sql-wasm.wasm"
	);
	const wasmBuffer = fs.readFileSync(wasmPath);
	const wasmBase64 = wasmBuffer.toString("base64");

	// Generate the file with the embedded WASM content
	const wasmModule = `// Generated file - DO NOT EDIT
exports.SQLITE_WASM = "${wasmBase64}";
`;

	// Write the generated file to the binaries folder
	fs.writeFileSync(
		path.join(__dirname, "src", "binaries", "sql-wasm-base64.js"),
		wasmModule
	);
	console.log("WASM binary embedded successfully!");
}

async function build() {
	// First, embed the WASM binary
	await embedWasm();

	const banner = `/*
    THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
    If you want to view the source, please visit the GitHub repository of this plugin.
    */`;

	const prod = process.argv.includes('production');

	// Build the plugin using esbuild
	const buildOptions = {
		banner: {
			js: banner,
		},
		entryPoints: ['src/main.ts'],
		bundle: true,
		external: [...builtinModules, 'obsidian'],
		format: 'cjs', // output as CommonJS
		target: 'es2022',
		sourcemap: prod ? false : 'inline',
		treeShaking: true,
		outfile: 'main.js',
		platform: 'node',
	};

	try {
		await esbuild.build(buildOptions);
		console.log('Build completed successfully!');
	} catch (error) {
		console.error('Unexpected error during build:', error);
		process.exit(1);
	}
}

build().catch((err) => {
	console.error("Unexpected error during build:", err);
	process.exit(1);
}); 