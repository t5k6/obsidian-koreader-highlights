const esbuild = require('esbuild');
const fs = require('node:fs');
const { builtinModules } = require('node:module');
const path = require('node:path');
const process = require('node:process');

async function embedWasm() {
    try {
        const wasmSourcePath = path.join(__dirname, "node_modules", "sql.js", "dist", "sql-wasm.wasm");
        const tsOutputPath = path.join(__dirname, "src", "binaries", "sql-wasm-base64.ts");

        if (!fs.existsSync(wasmSourcePath)) {
            console.error(`❌ FATAL: WASM source file not found at ${wasmSourcePath}. Ensure 'sql.js' is installed correctly.`);
            throw new Error("WASM source not found.");
        }
        console.log(`ℹ️ Reading WASM from: ${wasmSourcePath}`);
        const wasmBuffer = fs.readFileSync(wasmSourcePath);
        const wasmBase64 = wasmBuffer.toString("base64");
        console.log(`✅ Read ${wasmBuffer.length} bytes of WASM data.`);

        const tsModuleContent = `// Generated file - DO NOT EDIT MANUALLY - Contains base64 encoded sql-wasm.wasm
/**
 * Base64 encoded string of the sql-wasm.wasm binary.
 */
export const SQLITE_WASM: string = "${wasmBase64}";
`;
        const binariesDir = path.dirname(tsOutputPath);
        if (!fs.existsSync(binariesDir)) {
            fs.mkdirSync(binariesDir, { recursive: true });
            console.log(`✅ Created directory: ${binariesDir}`);
        }
        fs.writeFileSync(tsOutputPath, tsModuleContent);
        console.log(`✅ WASM binary embedded successfully into: ${tsOutputPath}`);

        const dtsPath = path.join(__dirname, "src", "binaries", "sql-wasm-base64.d.ts");
        if (fs.existsSync(dtsPath)) {
            fs.unlinkSync(dtsPath);
            console.log(`ℹ️ Removed redundant definitions file: ${dtsPath}`);
        }
    } catch (error) {
        console.error("❌ Error embedding WASM file:", error);
        throw error;
    }
}

async function build() {
    await embedWasm();

    const isProduction = process.env.NODE_ENV === 'production';
    console.log(`Running esbuild in ${isProduction ? 'production' : 'development'} mode.`);

    const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the GitHub repository of this plugin.
*/`;

    const buildOptions = {
        banner: {
            js: banner,
        },
        entryPoints: ['src/core/KoReaderImporterPlugin.ts'],
        bundle: true,
        external: [
            'obsidian',
            'electron',
            ...builtinModules.filter(m => !['electron', 'obsidian'].includes(m) && !m.startsWith('_')),
        ],
        format: 'cjs',
        target: 'es2022',
        logLevel: 'info',
        sourcemap: isProduction ? false : 'inline',
        treeShaking: true,
        minify: isProduction,
        define: {
            'process.env.NODE_ENV': JSON.stringify(isProduction ? 'production' : 'development'),
        },
        outfile: 'main.js',
        platform: 'node',
    };

    try {
        await esbuild.build(buildOptions);
        console.log('✅ Build completed successfully! Output: main.js');
        if (isProduction) {
            const stats = fs.statSync('main.js');
            console.log(`📏 Production main.js size: ${(stats.size / 1024).toFixed(2)} KB`);
        }
    } catch (error) {
        console.error('❌ esbuild failed:', error);
        process.exit(1);
    }
}

build().catch((err) => {
    console.error("Unexpected error during build execution:", err);
    process.exit(1);
});
