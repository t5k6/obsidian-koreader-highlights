const esbuild = require("esbuild");
const fs = require("node:fs/promises");
const { statSync } = require("node:fs");
const path = require("node:path");
const { builtinModules } = require("node:module");
const process = require("node:process");

const isProd = process.env.NODE_ENV === "production";
const rootDir = __dirname;

/* -------------------------------------------------- */
/* helpers                                            */
/* -------------------------------------------------- */

async function embedWasm() {
	const src = path.join(
		rootDir,
		"node_modules",
		"sql.js",
		"dist",
		"sql-wasm.wasm",
	);
	const dst = path.join(rootDir, "src", "binaries", "sql-wasm-base64.ts");

	try {
		const [s, d] = [statSync(src), statSync(dst)];
		if (d.mtimeMs >= s.mtimeMs) {
			console.log("‚ÑπÔ∏è  WASM already embedded ‚Äì skipping");
			return;
		}
	} catch {
		/* regenerate */
	}

	const base64 = (await fs.readFile(src)).toString("base64");
	const code = `// Generated ‚Äì DO NOT EDIT
export const SQLITE_WASM = "${base64}";
`;
	await fs.mkdir(path.dirname(dst), { recursive: true });
	await fs.writeFile(dst, code, "utf8");
	console.log("‚úÖ WASM embedded");
}

async function embedTemplates() {
	const dir = path.join(rootDir, "templates");
	const list = (await fs.readdir(dir)).filter((f) => f.endsWith(".md"));

	const obj = {};
	await Promise.all(
		list.map(async (f) => {
			const id = path.basename(f, ".md");
			const txt = await fs.readFile(path.join(dir, f), "utf8");
			obj[id] = txt;
		}),
	);
	console.log(`‚úÖ Embedded ${list.length} template(s)`);
	return JSON.stringify(JSON.stringify(obj));
}

/* -------------------------------------------------- */
/* build runner                                       */
/* -------------------------------------------------- */

async function runBuild({ watch }) {
	await embedWasm();
	const templateLiteral = await embedTemplates();

	const common = {
		entryPoints: ["src/main.ts"],
		outfile: "main.js",
		bundle: true,
		format: "cjs",
		platform: "node",
		target: "es2022",
		sourcemap: isProd ? false : "inline",
		minify: isProd,
		treeShaking: true,
		banner: {
			js: `/*
GENERATED BY ESBUILD ‚Äì do not edit main.js directly.
*/`,
		},
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtinModules.filter((m) => !m.startsWith("_")),
		],
		define: {
			"process.env.NODE_ENV": JSON.stringify(
				isProd ? "production" : "development",
			),
			KOREADER_BUILTIN_TEMPLATES: templateLiteral,
		},
		logLevel: "info",
	};

	if (watch) {
		const ctx = await esbuild.context(common);
		await ctx.watch();
		console.log("üëÄ  esbuild is watching‚Ä¶");
	} else {
		await esbuild.build(common);
		const kb = (statSync("main.js").size / 1024).toFixed(2);
		console.log(`üì¶  main.js size: ${kb} KB`);
	}
}

/* -------------------------------------------------- */
/* CLI glue                                           */
/* -------------------------------------------------- */

(async () => {
	try {
		const watch = process.argv.includes("--watch");
		await runBuild({ watch });
	} catch (err) {
		console.error("‚ùå Build failed:", err);
		process.exit(1);
	}
})();
