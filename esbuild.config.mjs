import builtins from 'builtin-modules';
import esbuild from 'esbuild';
import * as fs from 'node:fs';
import * as path from 'node:path';
import { dirname } from 'node:path';
import process from 'node:process';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function embedWasm() {
	// Read the WASM file from sql.js package
	const wasmPath = path.join(
		__dirname,
		"node_modules",
		"sql.js",
		"dist",
		"sql-wasm.wasm"
	);
	const wasmBuffer = fs.readFileSync(wasmPath);
	const wasmBase64 = wasmBuffer.toString("base64");

	// Generate the TypeScript file with the embedded WASM content
	const wasmModule = `// Generated file - DO NOT EDIT
export const SQLITE_WASM = "${wasmBase64}";
`;

	// Write the generated file to the binaries folder
	fs.writeFileSync(
		path.join(__dirname, "src", "binaries", "sql-wasm-base64.js"),
		wasmModule
	);
	console.log("WASM binary embedded successfully!");
}

async function build() {
	// First, embed the WASM binary
	await embedWasm();

	const banner = `/*
    THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
    If you want to view the source, please visit the GitHub repository of this plugin.
    */`;

	// Check if production mode is enabled
	const prod = process.argv.includes('production');

	// Build the plugin using esbuild
	esbuild.build({
		banner: {
			js: banner,
		},
		entryPoints: ['src/main.ts'],
		bundle: true,
		external: [
			'obsidian',
			'electron',
			'@codemirror/*',
			...builtins
		],
		format: 'cjs',
		target: 'es2022',
		sourcemap: prod ? false : 'inline',
		treeShaking: true,
		outfile: 'main.js',
		platform: 'node',
	}).catch((err) => {
		console.error("Build failed:", err);
		process.exit(1);
	});
}

build().catch((err) => {
	console.error("Unexpected error during build:", err);
	process.exit(1);
});
